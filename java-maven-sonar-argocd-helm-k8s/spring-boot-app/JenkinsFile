pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/ochukwudi/Jenkins-Zero-To-Hero.git'
      }
    }

    stage('Install JDK 21') {
      steps {
        sh '''
          apt-get update && apt-get install -y wget gnupg software-properties-common
          wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb
          apt install -y ./jdk-21_linux-x64_bin.deb
          export JAVA_HOME=/usr/lib/jvm/jdk-21
          export PATH=$JAVA_HOME/bin:$PATH
          java -version
          mvn -version
        '''
      }
    }

    stage('Build') {
      steps {
        sh '''
          export JAVA_HOME=/usr/lib/jvm/jdk-21
          export PATH=$JAVA_HOME/bin:$PATH
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package
        '''
      }
    }

    stage('Sonarqube-SAST') {
      environment {
        SONAR_URL = "http://54.90.202.105:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            export JAVA_HOME=/usr/lib/jvm/jdk-21
            export PATH=$JAVA_HOME/bin:$PATH
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "chuksteve/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            export JAVA_HOME=/usr/lib/jvm/jdk-21
            export PATH=$JAVA_HOME/bin:$PATH
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
              dockerImage.push()
          }
        }
      }
    }
  }
}
